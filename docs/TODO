todo

---- Requirements ----

  * Create one or more to-do list with a title
  * View all the to-do lists
  * Add an item to a to-do list
  * Delete an item from to-do list
  * Mark an item as done and undone
  * Delete a todo list

---- todo for todo App ----

* Initial setup 
    folders and files to create 
      public
      lib
      templates
      test
      public/scripts
      public/css

    files
      public/css/style.css
      public/index.html
      lib/app.js
      server.js

--DONE-- * Initialize npm package
--DONE-- * Add eslint

--DONE-- * Create server page which will give 404 error always. 
--DONE-- * Add Home page for the todo app.

--DONE-- * Update the server to response to css files.

--DONE-- * Store the data, data structure as 
    [{todoId: 1, title: "My day", items: [{ id: 1, done: false, item: "brush the teeth" }, ...] }, ...]

--DONE-- * Give id for todo and todo items
--DONE-- * Show all todo in the home page.

* Add class for
  --DONE-- todoList
  --DONE-- todo
  item

--DONE-- * Move the home page from templates to public and use onload to show the todo.

--DONE-- * Show all todo list with its items.
--DONE-- * Add checkbox for the status it done or not.
--DONE-- * Update when the item user click the check box as checked.

--DONE-- * Alow the user to delete the todo.
--DONE-- * Alow the user to delete a item.

* Change the form to xhr for save the new todo
--DONE--  - add a input to add new item in the todo
--DONE--  - add new item and display.

--DONE-- * Allow the user to edit the title 
  - onclick on the title, it will allow the user to edit
    and on enter it will update it.
--DONE-- * Allow the user to edit the items
  - onclick on the title, it will allow the user to edit
    and on enter it will update it.

* Refract the code
  - refract the variable and function names
  - Refract classes for html 
  - Remove the complexity of the code

 * Update the requests from client side.
  - For post request, return back success/unsuccess, or the id
    of the todo which updated.

* Store the todo list somewhere when the server will return the whole list.
* Remember the active todo.


-----------------------------------------------------

--Done-- Pull functions for filter method in todoList & todo class.

--Done-- renamed and modified displayTodoBoard to modifiyVisibiliy

--Done-- to make a dataBase directory to store todoHistory
--Done-- Auto focus is not working.
--Done-- Remove display item while searching.
--Done-- Listen the events with the id.
--Done-- Changing property of html classes. -----> display
--Done-- Refactor the updateTodoActive functions.

--Done--  after deletion of todo  it is returning error.
--Done-- not clearing the task lists after deletion.

--Done--  make a new todo item class
            - pass the item related features to item class

--Done-- instead of passing data in query string ,pass the data as json object
--Done-- pass item and todoId directly from functions.

* Modify integration test.

--Done-- Write unit level test.

* Change toJSON function in todoList

--Done-- Use delete method instead of Post in deletion
--Done-- Use Patch method instead of Post in edit

* focus after xhr requests.

--Done-- check the parameters before sending to handlers

--Done-- search feature by task.
* search case insensitive.

-----------------------------------login-------------

--Done-- create an html page for login and signUp

--Done-- save the new user details in userDetails.json

* while saving check whether userName is  already exist or not

* change the data structure of todoList 